fmod PERSONA is
 pr STRING .

 sort Persona .

 op <_,_> : String Nat -> Persona [ctor] .

 vars S S' : String .
 vars N N' : Nat .

 ops max min : Persona Persona -> Persona [comm] .

 ceq [max] : max(< S, N >, < S', N' >) = < S, N >
  if N >= N' .
 ceq [min] : min(< S, N >, < S', N' >) = < S, N >
  if N <= N' .

 ops _<=_ _>_ : Persona Persona -> Bool .
 eq < S, N > <= < S', N' > = N <= N' .
 eq < S, N > > < S', N' > = N > N' .

 *** Para hacer tests de manera mÃ¡s clara
 ops a b c d : -> Persona .
 eq a = < "a", 100 > .
 eq b = < "b", 80 > .
 eq c = < "c", 150 > .
 eq d = < "d", 10 > .
endfm

red a .

red a <= b .

red a > b .

red max(a, b) .

fmod LISTA is
 pr PERSONA .

 sorts Lista ListaOrd .
 subsort Persona < ListaOrd < Lista .

 op lv : -> ListaOrd [ctor] .
 op __ : Lista Lista -> Lista [ctor assoc id: lv] .

 vars P P' : Persona .
 vars L L' : Lista .
 var  LO : ListaOrd .

 cmb P P' L : ListaOrd
  if P <= P' /\
     P' L : ListaOrd .

 op head : Lista ~> Persona .
 eq head(P L) = P .

 op tail : Lista ~> Lista .
 eq tail(P L) = L .

 op tam : Lista -> Nat .
 eq tam(lv) = 0 .
 eq tam(P L) = s(tam(L)) .

 op esta? : Lista Persona -> Bool .
 eq esta?(L P L', P) = true .
 eq esta?(L, P) = false [owise] .

 op ordena : Lista -> Lista .
 ceq ordena(L P P' L') = ordena(L P' P L')
  if P > P' .
 eq ordena(L) = L [owise] .

 op inserta-ord : ListaOrd Persona -> ListaOrd .
 eq inserta-ord(lv, P) = P .
 eq inserta-ord(P L, P') = if P <= P'
                           then P inserta-ord(L, P')
                           else P' P L
                           fi .

 op ordena-por-insercion : ListaOrd -> ListaOrd .
 eq ordena-por-insercion(lv) = lv .
 ceq ordena-por-insercion(P L) = inserta-ord(L', P)
  if L' := ordena-por-insercion(L) .
endfm

red a b c d .

red tail(a b c d) .

red head(a b c d) .

red tam(a b c d) .

red esta?(a b c, d) .

red esta?(a b c d, d) .

red a d .

red d a .

red ordena(a b c d) .

red inserta-ord(a, b) .

red inserta-ord(inserta-ord(inserta-ord(inserta-ord(lv, a), b), c), d) .

fmod CONJUNTO is
 pr PERSONA .

 sort Cjto .
 subsort Persona < Cjto .

 op cv : -> Cjto [ctor] .
 op _,_ : Cjto Cjto -> Cjto [ctor assoc comm id: cv] .
endfm

red a, b, c, d .

mod UNIVERSIDAD is
 pr LISTA .
 pr CONJUNTO .

 sort Universidad .

 op [_|_|_]_ : Cjto ListaOrd Cjto Nat -> Universidad [ctor] .

 var  P : Persona .
 vars C C' : Cjto .
 var  N : Nat .
 var  LO : ListaOrd .

 rl [(P, C) | LO | C'] N
 => [C | inserta-ord(LO, P) | C'] N .

 rl [C | P LO | C'] s(N)
 => [C | LO | (C', P)] N .
endm

rew [(a, b, c, d) | lv | cv] 3 .

search [(a, b, c, d) | lv | cv] 3 =>* [C:Cjto | LO:ListaOrd | (C':Cjto, < "c", 150 >)] N:Nat .